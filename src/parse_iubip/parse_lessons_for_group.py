import sys, os
import json
import asyncio
import datetime

from emoji import emojize

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import read_information

from requests_html import HTMLSession


class Lessons:
    def __init__(self, name_group: str) -> None:
        """
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–∞—Ä—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
        """

        self.__URL = read_information.URL_IU_GR
        self.name_group = name_group
        self.connection = HTMLSession()
    

    async def parse_all_lessons(self) -> None | list:
        """
            –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä –≤ —É—á–µ–±–Ω–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏ - –ò–£–ë–ò–ü.
        """

        data = {"do": "schedule", "group": self.name_group}
        req = self.connection.post(self.__URL, data=data)

        if req.status_code == 200:

            with open("data/lessons_data.json", "w", encoding="UTF-8") as j_w:
                json_data: list = json.dumps(req.json(), indent=4, ensure_ascii=False)
                j_w.write(json_data)

            return req.json()
        
        else:

            return None
        
    
    async def get_all_lessons_for_group(self) -> list:
        """
            –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –ø–∞—Ä–∞—Ö.
        """

        res_json = await self.parse_all_lessons()
        
        all_lessons: list = list()

        for item in res_json[self.name_group][1]:
            for day in res_json[self.name_group][1][item][1]:
                for lessons in res_json[self.name_group][1][item][1].get(day):

                    #–ë–µ—Ä—ë–º –≤—Ä–µ–º—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä
                    time_to_lesson: dict = {
                        1: "<b>08:20 - 09:50</b>",
                        2: "<b>10:00 - 11:30</b>",
                        3: "<b>11:40 - 13:10</b>",
                        4: "<b>13:30 - 15:00</b>",
                        5: "<b>15:10 - 16:40</b>",
                        6: "<b>17:00 - 18:30</b>",
                        7: "<b>18:40 - 20:10</b>",
                        8: "<b>20:20 - 21:50</b>",
                    }
                    
                    result: list = list(res_json[self.name_group][1][item][1].get(day).get(lessons))[0]
                    message = emojize(f"üìÖ <b>–î–∞—Ç–∞: {result.get("DATE")}</b>\nüéì <b>–ü–∞—Ä–∞ ‚Ññ:</b> {result.get("LES")}\n{emojize(":hourglass_not_done:", language="en")} <b>–í—Ä–µ–º—è –ø–∞—Ä—ã</b>: {time_to_lesson.get(int(result.get("LES")))}\n\nüìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {result.get("SUBJECT").rstrip()}\nüö™ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {result.get("AUD")}\nüë®‚Äçüéì <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {result.get("NAME")}\nüè´ <b>–ö–∞—Ñ–µ–¥—Ä–∞:</b> {result.get("CAFEDRA")}\nüßë‚Äçüè´ <b>–ö—É—Ä—Å:</b> {result.get("COURSE")}\n", language="en")
                    all_lessons.append(message)    
        
        return all_lessons

    async def get_now_lessons(self, now_day: str = str(datetime.datetime.now().day)) -> list | bool:
        """
            –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        """

        res_json = await self.parse_all_lessons()
        
        all_lessons: list = list()

        for item in res_json[self.name_group][1]:
            for day in res_json[self.name_group][1][item][1]:
                for lessons in res_json[self.name_group][1][item][1].get(day):
                    result: list = list(res_json[self.name_group][1][item][1].get(day).get(lessons))[0]
                    data_find = result.get("DATE").split("-")
                    if int(now_day) == int(data_find[0]):

                        
                        #–ë–µ—Ä—ë–º –≤—Ä–µ–º—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä
                        
                        time_to_lesson: dict = {
                            1: "<b>08:20 - 09:50</b>",
                            2: "<b>10:00 - 11:30</b>",
                            3: "<b>11:40 - 13:10</b>",
                            4: "<b>13:30 - 15:00</b>",
                            5: "<b>15:10 - 16:40</b>",
                            6: "<b>17:00 - 18:30</b>",
                            7: "<b>18:40 - 20:10</b>",
                            8: "<b>20:20 - 21:50</b>",
                        }

                        message = f"üìÖ <b>–î–∞—Ç–∞: {result.get("DATE")}</b>\nüéì <b>–ü–∞—Ä–∞ ‚Ññ:</b> {result.get("LES")}\n{emojize(":hourglass_not_done:", language="en")} <b>–í—Ä–µ–º—è –ø–∞—Ä—ã</b>: {time_to_lesson.get(int(result.get("LES")))}\n\nüìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {result.get("SUBJECT").rstrip()}\nüö™ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {result.get("AUD")}\nüë®‚Äçüéì <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {result.get("NAME")}\nüè´ <b>–ö–∞—Ñ–µ–¥—Ä–∞:</b> {result.get("CAFEDRA")}\nüßë‚Äçüè´ <b>–ö—É—Ä—Å:</b> {result.get("COURSE")}\n"
                        all_lessons.append(message)
                        all_lessons.append("\n")

        if all_lessons:
            return all_lessons
        return False
    

    async def get_lessons_for_3d(self, now_day: int = datetime.datetime.now().day) -> tuple | bool:
        """
            –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ 3 –¥–Ω—è.
        """

        res_json = await self.parse_all_lessons()

        d3_lessons: list = list()
        max_indx = datetime.datetime.now().day + 3
        flag_state: bool = False

        all_week_days: list = list()
        result_week_days: list = list()

        for item in res_json[self.name_group][1]:
            for day in res_json[self.name_group][1][item][1]:
                for lessons in res_json[self.name_group][1][item][1].get(day):
                    result: list = list(res_json[self.name_group][1][item][1].get(day).get(lessons))[0]
                    
                    if int(result.get("DATE").split("-")[0]) == now_day:

                        #–ë–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –∫–ª—é—á—É.
                        week_days: dict = {
                            0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                            1: "–í—Ç–æ—Ä–Ω–∏–∫",
                            2: "–°—Ä–µ–¥–∞",
                            3: "–ß–µ—Ç–≤–µ—Ä–≥",
                            4: "–ü—è—Ç–Ω–∏—Ü–∞",
                            5: "–°—É–±–±–æ—Ç–∞",
                            6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                        }

                        #–ë–µ—Ä—ë–º –≤—Ä–µ–º—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä
                        
                        time_to_lesson: dict = {
                            1: "<b>08:20 - 09:50</b>",
                            2: "<b>10:00 - 11:30</b>",
                            3: "<b>11:40 - 13:10</b>",
                            4: "<b>13:30 - 15:00</b>",
                            5: "<b>15:10 - 16:40</b>",
                            6: "<b>17:00 - 18:30</b>",
                            7: "<b>18:40 - 20:10</b>",
                            8: "<b>20:20 - 21:50</b>",
                        }

                        local_date: datetime.datetime = datetime.datetime(*map(int, result.get("DATE").strip().split("-")[::-1]))

                        all_week_days.append(week_days.get(local_date.weekday()))

                        message = f"üìÖ <b>–î–∞—Ç–∞: {result.get("DATE")}</b>\nüéì <b>–ü–∞—Ä–∞ ‚Ññ:</b> {result.get("LES")}\n{emojize(":hourglass_not_done:", language="en")} <b>–í—Ä–µ–º—è –ø–∞—Ä—ã</b>: {time_to_lesson.get(int(result.get("LES")))}\nüìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {result.get("SUBJECT").rstrip()}\nüö™ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {result.get("AUD")}\nüë®‚Äçüéì <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {result.get("NAME")}\nüè´ <b>–ö–∞—Ñ–µ–¥—Ä–∞:</b> {result.get("CAFEDRA")}\nüßë‚Äçüè´ <b>–ö—É—Ä—Å:</b> {result.get("COURSE")}\n\n"
                        d3_lessons.append(message)
                        flag_state = True

                    else:

                        flag_state = False
                
                if now_day == max_indx:
                    return d3_lessons, result_week_days
                
                else:
                    if flag_state is True:
                        result_week_days.extend(list(set(all_week_days)))
                        all_week_days.clear()
                        now_day += 1
                        d3_lessons.append("\n\n")