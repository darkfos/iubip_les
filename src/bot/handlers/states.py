import sys, os
import logging

#–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
sys.path.insert(1, os.path.join(sys.path[0], "../.."))

#Aiogram
from aiogram import types, Router
from aiogram.fsm.context import FSMContext

#–°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from emoji import emojize
from datetime import datetime

#–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
from src.bot.states.lessons_for_group import GetLessonsForGroup, GetLessonsNow
from src.bot.states.work_with_db import CreateTemplate, CreateReview
from src.bot.states.reviews import ReviewUser
from src.bot.filters import check_group_in_list, check_templates

#–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã, –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –ò–£–ë–ò–ü
from src.parse_iubip.parse_lessons_for_group import Lessons
from src.parse_iubip.parse_all_groups import Groups

#–ë–î
from src.database import db_reviews, db_templates


#–†–æ—É—Ç–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
state_router: Router = Router()


@state_router.message(GetLessonsForGroup.name_group)
async def write_all_lessons(message: types.Message, state: FSMContext) -> None:
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã, –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä
    """

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä.")
    all_groups: list = await Groups().get_all_groups()

    name_group: str = ""
    for group in all_groups:
        if message.text in group:
            name_group = group
            break
    
    if name_group != "":
        try:
                
            group_lessons: list = await Lessons(name_group).get_all_lessons_for_group()
            await message.answer(text="üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b>–≤—Å–µ—Ö</b> –ø–∞—Ä", parse_mode="HTML")
            for lessons_day in group_lessons:
                await message.answer(text=lessons_day, parse_mode="HTML")

            logging.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ")
            await state.clear()

        except TypeError:
            await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à –∑–∞–ø—Ä–æ—Å <u>–Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω</u>", parse_mode="HTML")

    else:
        await message.answer(text="–ì—Ä—É–ø–ø–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    
@state_router.message(GetLessonsNow.name_group)
async def get_lessons_now(message: types.Message, state: FSMContext) -> None:
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.")
    all_groups: list = await Groups().get_all_groups()

    name_group: str = ""
    for group in all_groups:
        if message.text in group:
            name_group = group
            break
    
    if name_group != "":
        lessons_for_now: list | bool = await Lessons(name_group).get_now_lessons()

        if lessons_for_now:

            message_to_user: str = "".join(lessons_for_now)
            await message.answer(text=message_to_user, parse_mode="HTML")
            await state.clear()
        
        else:

            await message.answer(text="üìï –ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç")
            await state.clear()

    else:
        await message.answer(text="–ì—Ä—É–ø–ø–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@state_router.message(CreateTemplate.name_group, check_group_in_list.CheckGroup(), check_templates.CheckTemplates())
async def create_template(message: types.Message, state: FSMContext) -> None:
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 –¥–Ω—è.
    """

    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É".format(message.from_user.full_name))
    all_groups: list = await Groups().get_all_groups()
    message_to_res = message.text

    for group in all_groups:
        if message_to_res in group:
            message_to_res = group

    await state.update_data(name_group = message_to_res)
    all_data = await state.get_data()
    await state.clear()
    db_tmp = await db_templates.post_temp(name_user=message.from_user.full_name, name_group=all_data.get("name_group"), tg_id=message.from_user.id)

    if db_tmp:
        await message.answer("üí• –í–∞—à —à–∞–±–ª–æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    else:
        await message.answer("üî¥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à —à–∞–±–ª–æ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")


#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞
@state_router.message(ReviewUser.name_user)
async def get_name_user(message: types.Message, state: FSMContext) -> None:
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞
    """

    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—ë –∏–º—è".format(message.from_user.full_name))
    await message.answer(text=emojize(":check_mark: –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ <b>—Å–≤–æ–π –æ—Ç–∑—ã–≤</b>", language="en"), parse_mode="HTML")
    await state.update_data(name_user=message.text)
    await state.set_state(ReviewUser.message_user)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞
@state_router.message(ReviewUser.message_user)
async def get_name_user(message: types.Message, state: FSMContext) -> None:
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–∞–ø–∏—Å—å –æ—Ç–∑—ã–≤–∞ –≤ –ë–î.
    """

    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} –æ–∫–æ–Ω—á–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞".format(message.from_user.full_name))
    try:
        await message.answer(text="<i>–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</i>", parse_mode="HTML")

        await state.update_data(message_user=message.text)
        await state.update_data(date_message_from_user=datetime.now())

        #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        all_data_review: dict = await state.get_data()

        await state.clear()

        print(all_data_review)

        #–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –ë–î
        await db_reviews.add_review(name_user=all_data_review.get("name_user"), message=all_data_review.get("message_user"), date=all_data_review.get("date_message_from_user"), tg_id=message.from_user.id)

    except Exception:
        await message.answer(text="–û—à–∏–±–∫–∞, –≤–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω")