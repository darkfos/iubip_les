import sys, os
import logging

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext


#–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
from src.bot.text import commands_text
from src.bot.kb import inline_kb, reply_kb
from src.bot.states import lessons_for_group, work_with_db as wwd
from src.parse_iubip import parse_lessons_for_group
#–ë–î
from src.database import db_templates as db_t, db_reviews as db_r

commands_router = Router()


@commands_router.message(CommandStart())
async def start_bot(message: Message) -> None:
    """
        –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞.
    """

    #–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    photo_to_send = FSInputFile("iubip_les/src/static/main_iubip.png")
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É start".format(message.from_user.full_name))
    await message.answer_photo(photo=photo_to_send, caption=await commands_text.get_start_message(message.from_user.full_name), parse_mode="HTML", reply_markup=await reply_kb.get_start_bt())


@commands_router.message(Command("help"))
async def help_commands(message: Message) -> None:
    """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–º–æ—â–∏.
    """
    photo_to_send = FSInputFile("iubip_les/src/static/help_photo.jpg")
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É help".format(message.from_user.full_name))
    await message.answer_photo(photo=photo_to_send, caption=await commands_text.get_help_commands(), parse_mode="HTML")


@commands_router.message(Command("all_groups"))
async def all_groups_command(message: Message) -> None:
    """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–µ–±–Ω—ã—Ö –≥—Ä—É–ø–ø.
    """

    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É all_groups –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞".format(message.from_user.full_name))
    await message.answer(text=commands_text.text_to_all_groups, parse_mode="HTML", reply_markup=await inline_kb.get_all_groups_bt())


@commands_router.message(lambda message: message.text[2:].lower() in "–≤—Å–µ –ø–∞—Ä—ã")
@commands_router.message(Command("all_lessons"))    
async def get_all_lessons(message: Message, state: FSMContext):
    logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä")
    await state.set_state(lessons_for_group.GetLessonsForGroup.name_group)
    await message.answer(text=commands_text.text_to_find_group)


@commands_router.message(lambda message: message.text[2:].lower() in "–ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
@commands_router.message(Command("lessons_now"))
async def command_lessons_now(message: Message, state: FSMContext):
    await state.set_state(lessons_for_group.GetLessonsNow.name_group)
    await message.answer(text=commands_text.text_to_find_group)


@commands_router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext) -> None:
    """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã FSM - Finite State Machine
    """

    logging.critical("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å–±—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è.".format(message.from_user.full_name))

    #–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

    await message.answer(text=commands_text.text_cancel, parse_mode="HTML")


#–†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    
@commands_router.message(Command("create_template"))
async def create_template(message: Message, state: FSMContext):
    await message.answer("üí• –•–æ—Ä–æ—à–æ, {0} –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ–±–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–µ –∑–∞–±—É–¥—å –µ–≥–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/delete_template</b> !".format(message.from_user.full_name), parse_mode="HTML")
    await state.set_state(wwd.CreateTemplate.name_group)
    await message.answer("üñçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã")


@commands_router.message(Command("delete_template"))
async def delete_template(message: Message):
    await message.answer("üí• –í—ã –≤—ã–±—Ä–∞–ª–∏ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
    result = await db_t.del_temp(message.from_user.id)
    if result:
        await message.answer("üí• –í–∞—à —à–∞–±–ª–æ–Ω <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω</b>", parse_mode="HTML")
    else: await message.answer("üî¥ <b>–®–∞–±–ª–æ–Ω –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω</b>, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ–≥–æ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏", parse_mode="HTML")


@commands_router.message(Command("template"))
async def get_lessons_for_template(message: Message):
    result = await db_t.get_temp(message.from_user.id)

    if result:
        lessons_object = lessons_for_group.Lessons(result[0])

        message: list = await lessons_object.parse_lessons_for_group()

        for lesson in message:
            await message.answer(text=lesson, parse_mode="HTML")
    
    else:

        await message.answer(text="üî¥ –ù–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
